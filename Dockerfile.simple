# 最もシンプルなLambda用Dockerfile
FROM golang:1.24.2 AS builder
WORKDIR /src
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bootstrap lambda/handler.go

# Runtime stage
FROM public.ecr.aws/lambda/provided:al2023

# 基本的なツールをインストール
RUN dnf update -y && \
    dnf install -y curl tar xz && \
    dnf clean all

# 静的ffmpegバイナリをダウンロード
RUN curl -L -o /tmp/ffmpeg.tar.xz \
        https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz && \
    tar -C /opt -xJf /tmp/ffmpeg.tar.xz && \
    mv /opt/ffmpeg-*-static /opt/ffmpeg && \
    ln -s /opt/ffmpeg/ffmpeg /usr/local/bin/ffmpeg && \
    ln -s /opt/ffmpeg/ffprobe /usr/local/bin/ffprobe && \
    rm -f /tmp/ffmpeg.tar.xz

# Goアプリケーションをコピー（直接bootstrapという名前でビルド済み）
COPY --from=builder /src/bootstrap ${LAMBDA_TASK_ROOT}/bootstrap

# 権限とシンボリックリンクを設定
RUN chmod +x ${LAMBDA_TASK_ROOT}/bootstrap && \
    mkdir -p /var/runtime && \
    ln -sf ${LAMBDA_TASK_ROOT}/bootstrap /var/runtime/bootstrap

# 環境変数を設定
ENV PATH="/usr/local/bin:${PATH}"
ENV FFMPEG_PATH="/usr/local/bin/ffmpeg"

# テスト
RUN ls -la ${LAMBDA_TASK_ROOT}/ && \
    ls -la /var/runtime/ && \
    /usr/local/bin/ffmpeg -version | head -n 3

CMD ["bootstrap"]
